datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  emailVerified    String?
  password         String?
  image            String?    @default("http://localhost:3000/user.png")
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?
  orders           Order[]
  room             Int        @default(0)
  eployer          Employer[]
}

model Order {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String
  status          String
  createdDate     DateTime  @default(now())
  paymentIntentID String?   @unique
  products        Product[]
}

model Product {
  id          String       @id @default(cuid())
  name        String
  description String?
  unit_amount Float
  image       String?
  quantity    Float        @default(0)
  orders      Order[]
  productApp  ProductApp[]
}

model Employer {
  id       String   @id @default(cuid())
  userId   String?
  name     String?
  password String?
  email    String   @unique
  room     String   @default("Absent")
  rank     Int      @default(0)
  subord   String[]
  User     User?    @relation(fields: [userId], references: [id])
  grafic   Grafic[]
}

model Grafic {
  id         String    @id @default(cuid())
  lun        String?
  mar        String?
  mie        String?
  joi        String?
  vin        String?
  Employer   Employer? @relation(fields: [employerId], references: [id])
  employerId String?
}

model ProductApp {
  id        String   @id @default(cuid())
  nume      String
  cod       String?  @unique @default(cuid())
  pos       String   @default("0")
  productId String?
  Product   Product? @relation(fields: [productId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
